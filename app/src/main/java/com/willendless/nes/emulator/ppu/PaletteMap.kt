package com.willendless.nes.emulator.ppu

import android.graphics.Color
import android.os.Build
import androidx.annotation.RequiresApi
import com.willendless.nes.emulator.util.unreachable

@RequiresApi(Build.VERSION_CODES.O)
object PaletteMap {
   private val map = arrayOf(
      Color.valueOf(0x80.toFloat()/0xFF, 0x80.toFloat()/0xFF, 0x80.toFloat()/0xFF),
      Color.valueOf(0x00.toFloat()/0xFF, 0x3D.toFloat()/0xFF, 0xA6.toFloat()/0xFF),
      Color.valueOf(0x00.toFloat()/0xFF, 0x12.toFloat()/0xFF, 0xB0.toFloat()/0xFF),
      Color.valueOf(0x44.toFloat()/0xFF, 0x00.toFloat()/0xFF, 0x96.toFloat()/0xFF),
      Color.valueOf(0xA1.toFloat()/0xFF, 0x00.toFloat()/0xFF, 0x5E.toFloat()/0xFF),
      Color.valueOf(0xC7.toFloat()/0xFF, 0x00.toFloat()/0xFF, 0x28.toFloat()/0xFF),
      Color.valueOf(0xBA.toFloat()/0xFF, 0x06.toFloat()/0xFF, 0x00.toFloat()/0xFF),
      Color.valueOf(0x8C.toFloat()/0xFF, 0x17.toFloat()/0xFF, 0x00.toFloat()/0xFF),
      Color.valueOf(0x5C.toFloat()/0xFF, 0x2F.toFloat()/0xFF, 0x00.toFloat()/0xFF),
      Color.valueOf(0x10.toFloat()/0xFF, 0x45.toFloat()/0xFF, 0x00.toFloat()/0xFF),
      Color.valueOf(0x05.toFloat()/0xFF, 0x4A.toFloat()/0xFF, 0x00.toFloat()/0xFF),
      Color.valueOf(0x00.toFloat()/0xFF, 0x47.toFloat()/0xFF, 0x2E.toFloat()/0xFF),
      Color.valueOf(0x00.toFloat()/0xFF, 0x41.toFloat()/0xFF, 0x66.toFloat()/0xFF),
      Color.valueOf(0x00.toFloat()/0xFF, 0x00.toFloat()/0xFF, 0x00.toFloat()/0xFF),
      Color.valueOf(0x05.toFloat()/0xFF, 0x05.toFloat()/0xFF, 0x05.toFloat()/0xFF),
      Color.valueOf(0x00.toFloat()/0xFF, 0x00.toFloat()/0xFF, 0x00.toFloat()/0xFF),
      Color.valueOf(0xC7.toFloat()/0xFF, 0xC7.toFloat()/0xFF, 0xC7.toFloat()/0xFF),
      Color.valueOf(0x00.toFloat()/0xFF, 0x77.toFloat()/0xFF, 0xFF.toFloat()/0xFF),
      Color.valueOf(0x21.toFloat()/0xFF, 0x55.toFloat()/0xFF, 0xFF.toFloat()/0xFF),
      Color.valueOf(0x82.toFloat()/0xFF, 0x37.toFloat()/0xFF, 0xFA.toFloat()/0xFF),
      Color.valueOf(0xEB.toFloat()/0xFF, 0x2F.toFloat()/0xFF, 0xB5.toFloat()/0xFF),
      Color.valueOf(0xFF.toFloat()/0xFF, 0x29.toFloat()/0xFF, 0x50.toFloat()/0xFF),
      Color.valueOf(0xFF.toFloat()/0xFF, 0x22.toFloat()/0xFF, 0x00.toFloat()/0xFF),
      Color.valueOf(0xD6.toFloat()/0xFF, 0x32.toFloat()/0xFF, 0x00.toFloat()/0xFF),
      Color.valueOf(0xC4.toFloat()/0xFF, 0x62.toFloat()/0xFF, 0x00.toFloat()/0xFF),
      Color.valueOf(0x35.toFloat()/0xFF, 0x80.toFloat()/0xFF, 0x00.toFloat()/0xFF),
      Color.valueOf(0x05.toFloat()/0xFF, 0x8F.toFloat()/0xFF, 0x00.toFloat()/0xFF),
      Color.valueOf(0x00.toFloat()/0xFF, 0x8A.toFloat()/0xFF, 0x55.toFloat()/0xFF),
      Color.valueOf(0x00.toFloat()/0xFF, 0x99.toFloat()/0xFF, 0xCC.toFloat()/0xFF),
      Color.valueOf(0x21.toFloat()/0xFF, 0x21.toFloat()/0xFF, 0x21.toFloat()/0xFF),
      Color.valueOf(0x09.toFloat()/0xFF, 0x09.toFloat()/0xFF, 0x09.toFloat()/0xFF),
      Color.valueOf(0x09.toFloat()/0xFF, 0x09.toFloat()/0xFF, 0x09.toFloat()/0xFF),
      Color.valueOf(0xFF.toFloat()/0xFF, 0xFF.toFloat()/0xFF, 0xFF.toFloat()/0xFF),
      Color.valueOf(0x0F.toFloat()/0xFF, 0xD7.toFloat()/0xFF, 0xFF.toFloat()/0xFF),
      Color.valueOf(0x69.toFloat()/0xFF, 0xA2.toFloat()/0xFF, 0xFF.toFloat()/0xFF),
      Color.valueOf(0xD4.toFloat()/0xFF, 0x80.toFloat()/0xFF, 0xFF.toFloat()/0xFF),
      Color.valueOf(0xFF.toFloat()/0xFF, 0x45.toFloat()/0xFF, 0xF3.toFloat()/0xFF),
      Color.valueOf(0xFF.toFloat()/0xFF, 0x61.toFloat()/0xFF, 0x8B.toFloat()/0xFF),
      Color.valueOf(0xFF.toFloat()/0xFF, 0x88.toFloat()/0xFF, 0x33.toFloat()/0xFF),
      Color.valueOf(0xFF.toFloat()/0xFF, 0x9C.toFloat()/0xFF, 0x12.toFloat()/0xFF),
      Color.valueOf(0xFA.toFloat()/0xFF, 0xBC.toFloat()/0xFF, 0x20.toFloat()/0xFF),
      Color.valueOf(0x9F.toFloat()/0xFF, 0xE3.toFloat()/0xFF, 0x0E.toFloat()/0xFF),
      Color.valueOf(0x2B.toFloat()/0xFF, 0xF0.toFloat()/0xFF, 0x35.toFloat()/0xFF),
      Color.valueOf(0x0C.toFloat()/0xFF, 0xF0.toFloat()/0xFF, 0xA4.toFloat()/0xFF),
      Color.valueOf(0x05.toFloat()/0xFF, 0xFB.toFloat()/0xFF, 0xFF.toFloat()/0xFF),
      Color.valueOf(0x5E.toFloat()/0xFF, 0x5E.toFloat()/0xFF, 0x5E.toFloat()/0xFF),
      Color.valueOf(0x0D.toFloat()/0xFF, 0x0D.toFloat()/0xFF, 0x0D.toFloat()/0xFF),
      Color.valueOf(0x0D.toFloat()/0xFF, 0x0D.toFloat()/0xFF, 0x0D.toFloat()/0xFF),
      Color.valueOf(0xFF.toFloat()/0xFF, 0xFF.toFloat()/0xFF, 0xFF.toFloat()/0xFF),
      Color.valueOf(0xA6.toFloat()/0xFF, 0xFC.toFloat()/0xFF, 0xFF.toFloat()/0xFF),
      Color.valueOf(0xB3.toFloat()/0xFF, 0xEC.toFloat()/0xFF, 0xFF.toFloat()/0xFF),
      Color.valueOf(0xDA.toFloat()/0xFF, 0xAB.toFloat()/0xFF, 0xEB.toFloat()/0xFF),
      Color.valueOf(0xFF.toFloat()/0xFF, 0xA8.toFloat()/0xFF, 0xF9.toFloat()/0xFF),
      Color.valueOf(0xFF.toFloat()/0xFF, 0xA8.toFloat()/0xFF, 0xB3.toFloat()/0xFF),
      Color.valueOf(0xFF.toFloat()/0xFF, 0xD2.toFloat()/0xFF, 0xB0.toFloat()/0xFF),
      Color.valueOf(0xFF.toFloat()/0xFF, 0xEF.toFloat()/0xFF, 0xA6.toFloat()/0xFF),
      Color.valueOf(0xFF.toFloat()/0xFF, 0xF7.toFloat()/0xFF, 0x9C.toFloat()/0xFF),
      Color.valueOf(0xD7.toFloat()/0xFF, 0xE8.toFloat()/0xFF, 0x95.toFloat()/0xFF),
      Color.valueOf(0xA6.toFloat()/0xFF, 0xED.toFloat()/0xFF, 0xAF.toFloat()/0xFF),
      Color.valueOf(0xA2.toFloat()/0xFF, 0xF2.toFloat()/0xFF, 0xDA.toFloat()/0xFF),
      Color.valueOf(0x99.toFloat()/0xFF, 0xFF.toFloat()/0xFF, 0xFC.toFloat()/0xFF),
      Color.valueOf(0xDD.toFloat()/0xFF, 0xDD.toFloat()/0xFF, 0xDD.toFloat()/0xFF),
      Color.valueOf(0x11.toFloat()/0xFF, 0x11.toFloat()/0xFF, 0x11.toFloat()/0xFF),
      Color.valueOf(0x11.toFloat()/0xFF, 0x11.toFloat()/0xFF, 0x11.toFloat()/0xFF)
   )

   // REQUIRES: index < 64
   fun getColor(index: Int): Color {
       if (index >= 64) unreachable("Unable to get color with index $index")
       return map[index]
   }
}